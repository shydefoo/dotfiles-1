#!/usr/bin/env bash

# reference: https://github.com/anishathalye/dotfiles
# reference: https://github.com/dhruvmanila/dotfiles

# declare integer
declare -i exitcode
exitcode=0

# get base directory
BASEDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# # dotfiles directory
# declare DOTFILES_DIRECTORY="${HOME}/dotfiles"
# declare DOTFILES_TARBALL_PATH="https://github.com/MarkHershey/dotfiles/tarball/master"
# declare DOTFILES_GIT_REMOTE="https://github.com/MarkHershey/dotfiles.git"

# source utility functions
source "${BASEDIR}/shell_utils" || { echo "Failed to source shell_utils" >&2;exit 1; }


# ----------------------------------------------------
# zsh 

p_header "Install wget zsh vim git tmux tree make cmake golang python3 build-essential..."
{ sudo apt-get remove --assume-yes vim-tiny > /dev/null && \
sudo apt-get update > /dev/null && \
DEBIAN_FRONTEND=noninteractive sudo apt-get install -y --no-install-recommends \
wget \
zsh \
vim \
git \
tmux \
tree \
make \
cmake \
golang-go \
python3-dev \
fzf \
apt-transport-https \
curl \
autojump \
build-essential > /dev/null; } || { echo "Failed" >&2;exit 1; }
p_success "Done"


# ----------------------------------------------------
# default shell

p_header "Change default shell to zsh"
# { chsh -s "$(which zsh)" && echo "$SHELL"; } || { echo "Failed" >&2;exit 1; }
{ sudo chsh ${USER} -s $(which zsh) && echo "${SHELL}"; } || { echo "Failed" >&2;exit 1; }
p_success "Done"

# ----------------------------------------------------
# Oh My ZSH

p_header "Install Oh My ZSH"
TMP_INSTALL_PATH="${HOME}/.oh-my-zsh"
if [[ ! -d "${TMP_INSTALL_PATH}" ]]; then
    sh -c "$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended || { echo "Failed" >&2;exit 1; }
    p_success "Done"
else
    p_success "Oh My ZSH already installed."
fi

# ----------------------------------------------------
# Zsh Syntax Highlighting

p_header "Install Zsh Syntax Highlighting"
TMP_INSTALL_PATH="${HOME}/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting"
if [[ ! -d "${TMP_INSTALL_PATH}" ]]; then
    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git "${TMP_INSTALL_PATH}" || { echo "Failed" >&2;exit 1; }
    p_success "Done"
else
    p_success "Zsh Syntax Highlighting already installed."
fi


# ----------------------------------------------------
# Zsh Autosuggestions

p_header "Install Zsh Autosuggestions"
TMP_INSTALL_PATH="${HOME}/.oh-my-zsh/custom/plugins/zsh-autosuggestions"
if [[ ! -d "${TMP_INSTALL_PATH}" ]]; then
    git clone https://github.com/zsh-users/zsh-autosuggestions "${TMP_INSTALL_PATH}" || { echo "Failed" >&2;exit 1; }
    p_success "Done"
else
    p_success "Zsh Autosuggestions already installed."
fi


# ----------------------------------------------------
# Zsh Completions

p_header "Install Zsh Completions"
TMP_INSTALL_PATH="${HOME}/.oh-my-zsh/custom/plugins/zsh-completions"
if [[ ! -d "${TMP_INSTALL_PATH}" ]]; then
    git clone https://github.com/zsh-users/zsh-completions "${TMP_INSTALL_PATH}" || { echo "Failed" >&2;exit 1; }
    p_success "Done"
else
    p_success "Zsh Completions already installed."
fi


# ----------------------------------------------------
# Spaceship

p_header "Install Spaceship"
TMP_INSTALL_PATH="${HOME}/.oh-my-zsh/custom/themes/spaceship-prompt"
if [[ ! -d "${TMP_INSTALL_PATH}" ]]; then
    git clone https://github.com/denysdovhan/spaceship-prompt.git "${TMP_INSTALL_PATH}" --depth=1 || { echo "Failed" >&2;exit 1; }
    ln -s "$ZSH_CUSTOM/themes/spaceship-prompt/spaceship.zsh-theme" "$ZSH_CUSTOM/themes/spaceship.zsh-theme" 
    p_success "Done"
else
    p_success "Spaceship already installed."
fi
# ----------------------------------------------------
# Install neovim
if ! type_exists 'nvim'; then
  p_header "Installing neovim"
  sudo apt install -y --no-install-recommends neovim
  TMP_NVIM_CFG_PATH="${HOME}/.config/nvim/init.vim"
  if [[ ! -d "${TMP_NVIM_CFG_PATH}" ]]; then
    p_header "symlink vimrc for neovim init.vim"
    ln -s "${HOME}/.vimrc" $TMP_NVIM_CFG_PATH
  fi
else
  p_success "Neovim already installed"
fi
sudo apt install neovim

# ----------------------------------------------------
# Linking dotfiles

link_dotfile "zsh/zshrc"             ".zshrc"             || exitcode=1
link_dotfile "tmux/tmux.conf"        ".tmux.conf"         || exitcode=1
link_dotfile "git/gitconfig"         ".gitconfig"         || exitcode=1
link_dotfile "git/gitignore"         ".gitignore"         || exitcode=1
link_dotfile "xmodmap/Xmodmap"       ".Xmodmap"           || exitcode=1
link_dotfile "config/flake8"         ".config/flake8"     || exitcode=1


# ----------------------------------------------------
# Vim plugins

p_header "Install vim awesome"
TMP_INSTALL_PATH="${HOME}/.vim_runtime"
if [[ ! -d "${TMP_INSTALL_PATH}" ]]; then
    git clone https://github.com/shydefoo/vimrc.git "${TMP_INSTALL_PATH}" || { echo "Failed" >&2;exit 1; }
    cur_dir=$(pwd)
    cd "${TMP_INSTALL_PATH}"
    sh ./install_awesome_vimrc.sh
    p_success "Done"
else
    p_success "vim_runtime already installed."
fi

# ----------------------------------------------------
# Tmux plugins
p_header "Install tmux plugin manager"
TMP_INSTALL_PATH="${HOME}/.tmux/plugins/tpm"
if [[ ! -d "${TMP_INSTALL_PATH}" ]]; then
    git clone https://github.com/tmux-plugins/tpm "${TMP_INSTALL_PATH}"
    p_success "Done"
else
    p_success "Tmux plugin manager installed"
fi


# ----------------------------------------------------
# Personal scripts

p_header "Copy personal scripts to user home bin"
if [[ ! -d "${HOME}/bin" ]]; then
    mkdir -v "${HOME}/bin" || { echo "Failed" >&2;exit 1; }
fi
# -n for do not overwriting
# -v for verbose
cp -vn bin/* "${HOME}/bin"
p_success "Done"


# ----------------------------------------------------
# Exit

if [ ! ${exitcode} -eq 0 ]; then
    echo "Some parts failed"
else
    p_success "------ All Completed ------"
fi

exit ${exitcode}
