#!/usr/bin/env bash

declare -i exitcode
exitcode=0

# dotfiles directory
DOTFILES_DIRECTORY="${HOME}/repos/dotfiles-1"

# get base directory
BASEDIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Ask for the administrator password upfront
sudo -v

# ----------------------------------------------------

source "${BASEDIR}/shell_utils" || { echo "Failed to source shell_utils" >&2;exit 1; }
source "${BASEDIR}/homebrew/brew_install_packages"  || { echo "Failed to source brew_install_packages" >&2;exit 1; }

# change to the dotfiles directory
# For some unknown reason it doesn't exist, exit!
# p_header "Changing to the ${DOTFILES_DIRECTORY} directory"
# cd "${DOTFILES_DIRECTORY}" || { echo "Failed to change directory to ${DOTFILES_DIRECTORY}" >&2;exit 1; }
# p_success "Done"

# ----------------------------------------------------

# Before relying on Homebrew, check that packages can be compiled by making sure
p_header "Checking for xcode command line tools..."
if ! xcode-select -p > /dev/null; then
    printf "Installing xcode command line tools...\n"
    xcode-select --install > /dev/null

    # wait until the tools are installed...
    until xcode-select -p > /dev/null; do
        sleep 5;
    done
    # making sure we installed it
    if xcode-select -p > /dev/null; then
        p_success "Successfully installed xcode command line tools."
    else
        p_error "Failed to install xcode command line tools."
        exit 1
    fi
else
    p_success "xcode command line tools already installed."
fi

# extend sudo timeout for another 5 mins
sudo -v

# ----------------------------------------------------
# Check for Homebrew
# Install homebrew and all the requested packages

p_header "Checking for homebrew..."
if ! type_exists 'brew'; then
    p_header "Installing Homebrew..."
    bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"

    if type_exists 'brew'; then
        p_success "Successfully installed homebrew"
        brew_install_full
    else
        p_error "Failed to install homebrew."
        exit 1
    fi
else
    p_success "Homebrew already installed."
    brew_install_full
fi


# ----------------------------------------------------
# Enable key bindings for fzf
p_header "Enabling fzf"
$(brew --prefix)/opt/fzf/install


# extend sudo timeout for another 5 mins
sudo -v

# ----------------------------------------------------
# Check for git
# Git will be installed with xcode command line tools. If not
# then install with homebrew

p_header "Checking for git..."
if ! type_exists 'git'; then
    p_header "Updating Homebrew..."
    brew update > /dev/null
    p_success "Homebrew updated"
    p_header "Installing Git..."
    brew install git
    if type_exists 'git'; then
        p_success "Successfully installed git."
    else
        p_error "Failed to install git."
        exit 1
    fi
else
    p_success "Git already installed."
fi


# ----------------------------------------------------
# Oh My ZSH

p_header "Install Oh My ZSH"
TMP_INSTALL_PATH="${HOME}/.oh-my-zsh"
if [[ ! -d "${TMP_INSTALL_PATH}" ]]; then
    sh -c "$(wget -O- https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)" "" --unattended || { echo "Failed" >&2;exit 1; }
    p_success "Done"
else
    p_success "Oh My ZSH already installed."
fi


# ----------------------------------------------------
# Zsh Syntax Highlighting

p_header "Install Zsh Syntax Highlighting"
TMP_INSTALL_PATH="${HOME}/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting"
if [[ ! -d "${TMP_INSTALL_PATH}" ]]; then
    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git "${TMP_INSTALL_PATH}" || { echo "Failed" >&2;exit 1; }
    p_success "Done"
else
    p_success "Zsh Syntax Highlighting already installed."
fi


# ----------------------------------------------------
# Zsh Autosuggestions

p_header "Install Zsh Autosuggestions"
TMP_INSTALL_PATH="${HOME}/.oh-my-zsh/custom/plugins/zsh-autosuggestions"
if [[ ! -d "${TMP_INSTALL_PATH}" ]]; then
    git clone https://github.com/zsh-users/zsh-autosuggestions "${TMP_INSTALL_PATH}" || { echo "Failed" >&2;exit 1; }
    p_success "Done"
else
    p_success "Zsh Autosuggestions already installed."
fi


# ----------------------------------------------------
# Zsh Completions

p_header "Install Zsh Completions"
TMP_INSTALL_PATH="${HOME}/.oh-my-zsh/custom/plugins/zsh-completions"
if [[ ! -d "${TMP_INSTALL_PATH}" ]]; then
    git clone https://github.com/zsh-users/zsh-completions "${TMP_INSTALL_PATH}" || { echo "Failed" >&2;exit 1; }
    p_success "Done"
else
    p_success "Zsh Completions already installed."
fi

# ----------------------------------------------------
# Spaceship

p_header "Install Spaceship"
TMP_INSTALL_PATH="${HOME}/.oh-my-zsh/custom/themes/spaceship-prompt"
if [[ ! -d "${TMP_INSTALL_PATH}" ]]; then
    git clone https://github.com/denysdovhan/spaceship-prompt.git "${TMP_INSTALL_PATH}" --depth=1 || { echo "Failed" >&2;exit 1; }
    ZSH_CUSTOM=${HOME}/.oh-my-zsh/custom
    ln -s "$ZSH_CUSTOM/themes/spaceship-prompt/spaceship.zsh-theme" "$ZSH_CUSTOM/themes/spaceship.zsh-theme" 
    p_success "Done"
else
    p_success "Spaceship already installed."
fi
# ----------------------------------------------------




# ----------------------------------------------------
# Linking dotfiles

mkdir -p ~/.config
mkdir -p ~/.config/karabiner
mkdir -p ~/.config/k9s
link_dotfile "zsh/zshrc"             ".zshrc"             || exitcode=1
link_dotfile "tmux/tmux.conf"        ".tmux.conf"         || exitcode=1
link_dotfile "git/gitconfig"         ".gitconfig"         || exitcode=1
link_dotfile "git/gitignore"         ".gitignore"         || exitcode=1
link_dotfile "config/flake8"         ".config/flake8"     || exitcode=1
link_dotfile "karabiner/karabiner.json" ".config/karabiner/karabiner.json" || exitcode=1
link_dotfile "dotfiles/.bash_aliases" ".bash_aliases"     || exitcode=1
link_dotfile "dotfiles/.bash_functions" ".bash_functions" || exitcode=1
link_dotfile "wezterm/.wezterm.lua" ".wezterm.lua"        || exitcode=1
# NOTE: only for linux
# link_dotfile "k9s/plugin.yml" ".config/k9s/plugin.yml"  || exitcode=1
link_dotfile "k9s/skin.yml" ".config/k9s/skin.yml"    || exitcode=1

# ---------------------------------------------------
# nvim config
p_header "Cloning neovim config"
git clone git@github.com:shydefoo/nvim.git ~/.config/nvim
p_success "Successfully cloned neovim config"

# ---------------------------------------------------

# ----------------------------------------------------
# True color in neovim
p_header "Append config to init.vim"
if [[ $(grep -L "set termguicolors" ${HOME}/.config/nvim/init.vim) ]]; then   
  echo "set termguicolors" >> ${HOME}/.config/nvim/init.vim
fi

# ----------------------------------------------------
# Tmux plugins
p_header "Install tmux plugin manager"
TMP_INSTALL_PATH="${HOME}/.tmux/plugins/tpm"
if [[ ! -d "${TMP_INSTALL_PATH}" ]]; then
    git clone https://github.com/tmux-plugins/tpm "${TMP_INSTALL_PATH}"
    p_success "Done"
else
    p_success "Tmux plugin manager installed"
fi


# ----------------------------------------------------
# Personal scripts

p_header "Copy personal scripts to user home bin"
if [[ ! -d "${HOME}/bin" ]]; then
    mkdir -v "${HOME}/bin" || { echo "Failed" >&2;exit 1; }
fi
# -n for do not overwriting
# -v for verbose
cp -vn bin/* "${HOME}/bin"
p_success "Done"


# ----------------------------------------------------
# macOS System Preferences

# p_header "Setting Custom System Preferences"
# bash "${BASEDIR}/macos/macOS_custom_setup.sh" || exitcode=1
# p_success "Done"


# ----------------------------------------------------
# Exit

# ---------------------------------------------------
# homebrew cask applications

p_header "Install homebrew cask applications"
/bin/bash ${BASEDIR}/homebrew/install_cask.sh
p_success "Done"
# ---------------------------------------------------

if [ ! ${exitcode} -eq 0 ]; then
    echo "Some parts failed"
else
    p_success "------ All Completed ------"
fi

exit ${exitcode}
